{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/keyboard-a2b5e51d.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","previousLayoutViewport","currentLayoutViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","copyLayoutViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","layoutViewportDidChange","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft","innerWidth"],"mappings":"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","file":"keyboard-a2b5e51d-js-es5.js","sourcesContent":["const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet previousLayoutViewport = {};\nlet currentLayoutViewport = {};\nlet keyboardOpen = false;\n/**\n * This is only used for tests\n */\nconst resetKeyboardAssist = () => {\n    previousVisualViewport = {};\n    currentVisualViewport = {};\n    previousLayoutViewport = {};\n    currentLayoutViewport = {};\n    keyboardOpen = false;\n};\nconst startKeyboardAssist = (win) => {\n    startNativeListeners(win);\n    if (!win.visualViewport) {\n        return;\n    }\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    currentLayoutViewport = copyLayoutViewport(win);\n    win.visualViewport.onresize = () => {\n        trackViewportChanges(win);\n        if (keyboardDidOpen() || keyboardDidResize(win)) {\n            setKeyboardOpen(win);\n        }\n        else if (keyboardDidClose(win)) {\n            setKeyboardClose(win);\n        }\n    };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nconst startNativeListeners = (win) => {\n    win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\n    win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nconst setKeyboardOpen = (win, ev) => {\n    fireKeyboardOpenEvent(win, ev);\n    keyboardOpen = true;\n};\nconst setKeyboardClose = (win) => {\n    fireKeyboardCloseEvent(win);\n    keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accomodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nconst keyboardDidOpen = () => {\n    const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n    return (!keyboardOpen &&\n        previousVisualViewport.width === currentVisualViewport.width &&\n        scaledHeightDifference > KEYBOARD_THRESHOLD &&\n        !layoutViewportDidChange());\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nconst keyboardDidResize = (win) => {\n    return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nconst keyboardDidClose = (win) => {\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Determine if the layout viewport has\n * changed since the last visual viewport change.\n * It is rare that a layout viewport change is not\n * associated with a visual viewport change so we\n * want to make sure we don't get any false positives.\n */\nconst layoutViewportDidChange = () => {\n    return (currentLayoutViewport.width !== previousLayoutViewport.width ||\n        currentLayoutViewport.height !== previousLayoutViewport.height);\n};\n/**\n * Dispatch a keyboard open event\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n    const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n    const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n        detail: { keyboardHeight }\n    });\n    win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nconst fireKeyboardCloseEvent = (win) => {\n    const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n    win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nconst trackViewportChanges = (win) => {\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    previousLayoutViewport = Object.assign({}, currentLayoutViewport);\n    currentLayoutViewport = copyLayoutViewport(win);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nconst copyVisualViewport = (visualViewport) => {\n    return {\n        width: Math.round(visualViewport.width),\n        height: Math.round(visualViewport.height),\n        offsetTop: visualViewport.offsetTop,\n        offsetLeft: visualViewport.offsetLeft,\n        pageTop: visualViewport.pageTop,\n        pageLeft: visualViewport.pageLeft,\n        scale: visualViewport.scale\n    };\n};\n/**\n * Creates a deep copy of the layout viewport\n * at a given state\n */\nconst copyLayoutViewport = (win) => {\n    return {\n        width: win.innerWidth,\n        height: win.innerHeight\n    };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyLayoutViewport, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\n"]}